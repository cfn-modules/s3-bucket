---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'cfn-modules: AWS S3 bucket'
# cfn-modules:implements(ExposeArn, ExposeName, LambdaDependency)
Parameters:
  KmsKeyModule:
    Description: 'Optional but recommended stack name of kms-key module.'
    Type: String
    Default: ''
  BucketName:
    Description: 'Optional name of the bucket.'
    Type: String
    Default: ''
  Access:
    Description: 'Access policy of the bucket.'
    Type: String
    Default: Private
    AllowedValues: [Private, PublicRead, CloudFrontRead]
  Versioning:
    Description: 'Enable versioning to keep a backup if objects change.'
    Type: String
    Default: true
    AllowedValues: [true, false, 'false-but-was-true']
  NoncurrentVersionExpirationInDays:
    Description: 'Remove noncurrent object versions after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
Conditions:
  HasKmsKeyModule: !Not [!Equals [!Ref KmsKeyModule, '']]
  HasPublicReadAccess: !Equals [!Ref Access, PublicRead]
  HasCloudFrontReadAccess: !Equals [!Ref Access, CloudFrontRead]
  HasBucketName: !Not [!Equals [!Ref BucketName, '']]
  HasVersioning: !Equals [!Ref Versioning, true]
  HadVersioning: !Equals [!Ref Versioning, 'false-but-was-true']
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref NoncurrentVersionExpirationInDays, 0]]
  NeedsBucketPolicy: !Or [!Condition HasPublicReadAccess, !Condition HasCloudFrontReadAccess, !Condition HasKmsKeyModule]
Resources:
  Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [HasBucketName, !Ref BucketName, !Ref 'AWS::NoValue']
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
        - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref NoncurrentVersionExpirationInDays, 1]
          Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption: !If [HasKmsKeyModule, {ServerSideEncryptionConfiguration: [{ServerSideEncryptionByDefault: {KMSMasterKeyID: {'Fn::ImportValue': !Sub '${KmsKeyModule}-Arn'}, SSEAlgorithm: 'aws:kms'}}]}, !Ref 'AWS::NoValue']
  BucketPolicy:
    Condition: NeedsBucketPolicy
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
        - !If
          - HasPublicReadAccess
          - Principal: '*'
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasCloudFrontReadAccess
          - Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub '${Bucket.Arn}/*'
          - !Ref 'AWS::NoValue'
        - !If
          - HasKmsKeyModule
          - Principal: '*'
            Action: 's3:PutObject*'
            Effect: Deny
            Resource: !Sub '${Bucket.Arn}/*'
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': ''
                's3:x-amz-server-side-encryption-aws-kms-key-id': {'Fn::ImportValue': !Sub '${KmsKeyModule}-Arn'}
          - !Ref 'AWS::NoValue'
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Bucket
Outputs:
  ModuleId:
    Value: 's3-bucket'
  ModuleVersion:
    Value: '0.0.2'
  StackName:
    Value: !Ref 'AWS::StackName'
  Arn:
    Value: !GetAtt 'Bucket.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-Arn'
  Name:
    Value: !Ref Bucket
    Export:
      Name: !Sub '${AWS::StackName}-Name'
  IamActions:
    Value: 's3:DeleteObject*,s3:GetObject*,s3:ListBucket*,s3:ListMultipartUploadParts,s3:PutObject*'
    Export:
      Name: !Sub '${AWS::StackName}-IamActions'
  IamResources:
    Value: !Sub '${Bucket.Arn},${Bucket.Arn}/*'
    Export:
      Name: !Sub '${AWS::StackName}-IamResources'
