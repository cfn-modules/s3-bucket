---
# Copyright 2018 widdix GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: '2010-09-09'
Description: 'cfn-modules: AWS S3 bucket'
# cfn-modules:implements(ExposeArn, ExposeName, LambdaDependency)
Parameters:
  KmsKeyModule:
    Description: 'Optional but recommended stack name of kms-key module (only works in combination with Access := [Private, PublicRead]).'
    Type: String
    Default: ''
  BucketName:
    Description: 'Optional name of the bucket.'
    Type: String
    Default: ''
  Access:
    Description: 'Access policy of the bucket.'
    Type: String
    Default: Private
    AllowedValues: [Private, PublicRead, CloudFrontRead, CloudFrontAccessLogWrite, ElbAccessLogWrite, ConfigWrite, CloudTrailWrite, FlowLogWrite, Custom]
  Cors:
    Description: 'CORS policy of the bucket.'
    Type: String
    Default: Disabled
    AllowedValues: [Disabled, AllowAll]
  Versioning:
    Description: 'Enable versioning to keep a backup if objects change.'
    Type: String
    Default: true
    AllowedValues: [true, false, 'false-but-was-true']
  NoncurrentVersionExpirationInDays:
    Description: 'Remove noncurrent object versions after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  ExpirationInDays:
    Description: 'Remove objects after days (set to 0 to disable).'
    Type: Number
    Default: 0
    MinValue: 0
  # TODO add SNS event target when sns-topic module is present
  LambdaEventTargetLambdaModule1:
    Description: 'Optional stack name of lambda-function module to receive events from this S3 bucket. Also grants the Lambda function access to this bucket and this bucket access to the Lambda function.'
    Type: String
    Default: ''
  LambdaEventType1:
    Description: 'S3 bucket events you want to receive'
    Type: String
    Default: 's3:ObjectCreated:*'
  LambdaEventTargetLambdaModule2:
    Description: 'Optional stack name of lambda-function module to receive events from this S3 bucket. Also grants the Lambda function access to this bucket and this bucket access to the Lambda function.'
    Type: String
    Default: ''
  LambdaEventType2:
    Description: 'S3 bucket events you want to receive'
    Type: String
    Default: 's3:ObjectRemoved:*'
  LambdaEventTargetLambdaModule3:
    Description: 'Optional stack name of lambda-function module to receive events from this S3 bucket. Also grants the Lambda function access to this bucket and this bucket access to the Lambda function.'
    Type: String
    Default: ''
  LambdaEventType3:
    Description: 'S3 bucket events you want to receive'
    Type: String
    Default: 's3:ReducedRedundancyLostObject'
  BlockPublicAcls:
    Description: 'Specifies whether Amazon S3 should block public access control lists (ACLs) for this bucket and objects in this bucket.'
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  BlockPublicPolicy:
    Description: 'Specifies whether Amazon S3 should block public bucket policies for this bucket. Setting this element to TRUE causes Amazon S3 to reject calls to PUT Bucket policy if the specified bucket policy allows public access.'
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  IgnorePublicAcls:
    Description: 'Specifies whether Amazon S3 should ignore public ACLs for this bucket and objects in this bucket. Setting this element to TRUE causes Amazon S3 to ignore all public ACLs on this bucket and objects in this bucket.'
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
  RestrictPublicBuckets:
    Description: 'Specifies whether Amazon S3 should restrict public bucket policies for this bucket. Setting this element to TRUE restricts access to this bucket to only AWS service principals and authorized users within this account if the bucket has a public policy.'
    Type: String
    AllowedValues: ['true', 'false']
    Default: 'false'
Conditions:
  HasKmsKeyModule: !Not [!Equals [!Ref KmsKeyModule, '']]
  HasPrivateAccess: !Equals [!Ref Access, Private]
  HasPrivateAccessAndKmsKeyModule: !And [!Condition HasPrivateAccess, !Condition HasKmsKeyModule]
  HasPublicReadAccess: !Equals [!Ref Access, PublicRead]
  HasCloudFrontReadAccess: !Equals [!Ref Access, CloudFrontRead]
  HasElbAccessLogWriteAccess: !Equals [!Ref Access, ElbAccessLogWrite]
  HasConfigWriteAccess: !Equals [!Ref Access, ConfigWrite]
  HasCloudTrailWriteAccess: !Equals [!Ref Access, CloudTrailWrite]
  HasFlowLogWriteAccess: !Equals [!Ref Access, FlowLogWrite]
  HasCorsAllowAll: !Equals [!Ref Cors, AllowAll]
  HasBucketName: !Not [!Equals [!Ref BucketName, '']]
  HasVersioning: !Equals [!Ref Versioning, true]
  HadVersioning: !Equals [!Ref Versioning, 'false-but-was-true']
  HasNoncurrentVersionExpirationInDays: !Not [!Equals [!Ref NoncurrentVersionExpirationInDays, 0]]
  HasExpirationInDays: !Not [!Equals [!Ref ExpirationInDays, 0]]
  HasLambdaEventTargetLambdaModule1: !Not [!Equals [!Ref LambdaEventTargetLambdaModule1, '']]
  HasLambdaEventTargetLambdaModule2: !Not [!Equals [!Ref LambdaEventTargetLambdaModule2, '']]
  HasLambdaEventTargetLambdaModule3: !Not [!Equals [!Ref LambdaEventTargetLambdaModule3, '']]
  HasPartitionPublic: !Equals [!Ref 'AWS::Partition', 'aws']
  HasPartitionChina: !Equals [!Ref 'AWS::Partition', 'aws-cn']
  HasPartitionUsGov: !Equals [!Ref 'AWS::Partition', 'aws-us-gov']
Resources:
  PolicyLambdaEventTarget1:
    Type: 'AWS::IAM::Policy'
    Condition: HasLambdaEventTargetLambdaModule1
    Properties:
      Roles:
      - 'Fn::ImportValue': !Sub '${LambdaEventTargetLambdaModule1}-RoleName'
      PolicyName: !Sub 'cfn-modules-${Bucket}-target1' # ASCII characters minus the following reserved characters: backward slash (\), forward slash (/), asterisk (*), question mark (?), and white space
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:DeleteObject*'
          - 's3:GetObject*'
          - 's3:ListBucket*'
          - 's3:ListMultipartUploadParts'
          - 's3:PutObject*'
          Resource:
          - !GetAtt 'Bucket.Arn'
          - !Sub '${Bucket.Arn}/*'
  PolicyLambdaEventTarget2:
    Type: 'AWS::IAM::Policy'
    Condition: HasLambdaEventTargetLambdaModule2
    Properties:
      Roles:
      - 'Fn::ImportValue': !Sub '${LambdaEventTargetLambdaModule2}-RoleName'
      PolicyName: !Sub 'cfn-modules-${Bucket}-target2' # ASCII characters minus the following reserved characters: backward slash (\), forward slash (/), asterisk (*), question mark (?), and white space
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:DeleteObject*'
          - 's3:GetObject*'
          - 's3:ListBucket*'
          - 's3:ListMultipartUploadParts'
          - 's3:PutObject*'
          Resource:
          - !GetAtt 'Bucket.Arn'
          - !Sub '${Bucket.Arn}/*'
  PolicyLambdaEventTarget3:
    Type: 'AWS::IAM::Policy'
    Condition: HasLambdaEventTargetLambdaModule3
    Properties:
      Roles:
      - 'Fn::ImportValue': !Sub '${LambdaEventTargetLambdaModule3}-RoleName'
      PolicyName: !Sub 'cfn-modules-${Bucket}-target3' # ASCII characters minus the following reserved characters: backward slash (\), forward slash (/), asterisk (*), question mark (?), and white space
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - 's3:DeleteObject*'
          - 's3:GetObject*'
          - 's3:ListBucket*'
          - 's3:ListMultipartUploadParts'
          - 's3:PutObject*'
          Resource:
          - !GetAtt 'Bucket.Arn'
          - !Sub '${Bucket.Arn}/*'
  PermissionLambdaEventTarget1:
    Condition: HasLambdaEventTargetLambdaModule1
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: {'Fn::ImportValue': !Sub '${LambdaEventTargetLambdaModule1}-Arn'}
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !If [HasBucketName, !Sub 'arn:${AWS::Partition}:s3:::${BucketName}', !Ref 'AWS::NoValue'] # least privilege only works when BucketName is set (documented limitation)
  PermissionLambdaEventTarget2:
    Condition: HasLambdaEventTargetLambdaModule2
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: {'Fn::ImportValue': !Sub '${LambdaEventTargetLambdaModule2}-Arn'}
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !If [HasBucketName, !Sub 'arn:${AWS::Partition}:s3:::${BucketName}', !Ref 'AWS::NoValue'] # least privilege only works when BucketName is set (documented limitation)
  PermissionLambdaEventTarget3:
    Condition: HasLambdaEventTargetLambdaModule3
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:invokeFunction'
      FunctionName: {'Fn::ImportValue': !Sub '${LambdaEventTargetLambdaModule3}-Arn'}
      Principal: 's3.amazonaws.com'
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !If [HasBucketName, !Sub 'arn:${AWS::Partition}:s3:::${BucketName}', !Ref 'AWS::NoValue'] # least privilege only works when BucketName is set (documented limitation)
  Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !If [HasBucketName, !Ref BucketName, !Ref 'AWS::NoValue']
      CorsConfiguration: !If
      - HasCorsAllowAll
      - CorsRules:
        - AllowedHeaders:
          - '*'
          AllowedMethods:
          - HEAD
          - GET
          - PUT
          - POST
          - DELETE
          AllowedOrigins:
          - '*'
          ExposedHeaders:
          - 'x-amz-server-side-encryption'
          - 'x-amz-request-id'
          - 'x-amz-id-2'
          - 'ETag'
          MaxAge: 3000
      - !Ref 'AWS::NoValue'
      LifecycleConfiguration:
        Rules:
        - AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 7
          Status: Enabled
        - NoncurrentVersionExpirationInDays: !If [HasNoncurrentVersionExpirationInDays, !Ref NoncurrentVersionExpirationInDays, 1]
          Status: !If [HasNoncurrentVersionExpirationInDays, Enabled, Disabled]
        - ExpirationInDays: !If [HasExpirationInDays, !Ref ExpirationInDays, 1]
          Status: !If [HasExpirationInDays, Enabled, Disabled]
      NotificationConfiguration:
        LambdaConfigurations:
        - !If [HasLambdaEventTargetLambdaModule1, {Event: !Ref LambdaEventType1, Function: {'Fn::ImportValue': !Sub '${LambdaEventTargetLambdaModule1}-Arn'}}, !Ref 'AWS::NoValue']
        - !If [HasLambdaEventTargetLambdaModule2, {Event: !Ref LambdaEventType2, Function: {'Fn::ImportValue': !Sub '${LambdaEventTargetLambdaModule2}-Arn'}}, !Ref 'AWS::NoValue']
        - !If [HasLambdaEventTargetLambdaModule3, {Event: !Ref LambdaEventType3, Function: {'Fn::ImportValue': !Sub '${LambdaEventTargetLambdaModule3}-Arn'}}, !Ref 'AWS::NoValue']
        # QueueConfigurations: # Using SQS as a target does not work because the SQS queue policy can not be restricted to an AWS account (only to single S3 buckets which is not possible because we don't have that information (cyclic dependency)).
      VersioningConfiguration: !If [HasVersioning, {Status: Enabled}, !If [HadVersioning, {Status: Suspended}, !Ref 'AWS::NoValue']]
      BucketEncryption: !If [HasKmsKeyModule, {ServerSideEncryptionConfiguration: [{ServerSideEncryptionByDefault: {KMSMasterKeyID: {'Fn::ImportValue': !Sub '${KmsKeyModule}-Arn'}, SSEAlgorithm: 'aws:kms'}}]}, !Ref 'AWS::NoValue']
      PublicAccessBlockConfiguration:
        BlockPublicAcls: !Ref BlockPublicAcls
        BlockPublicPolicy: !Ref BlockPublicPolicy
        IgnorePublicAcls: !Ref IgnorePublicAcls
        RestrictPublicBuckets: !Ref RestrictPublicBuckets
  BucketPolicyPrivate:
    Condition: HasPrivateAccessAndKmsKeyModule
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Principal: '*'
          Action: 's3:PutObject*'
          Effect: Deny
          Resource: !Sub '${Bucket.Arn}/*'
          Condition:
            StringNotEquals:
              's3:x-amz-server-side-encryption': ''
              's3:x-amz-server-side-encryption-aws-kms-key-id': {'Fn::ImportValue': !Sub '${KmsKeyModule}-Arn'}
  BucketPolicyPublic:
    Condition: HasPublicReadAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Principal: '*'
          Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub '${Bucket.Arn}/*'
  BucketPolicyCloudFrontRead:
    Condition: HasCloudFrontReadAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
          Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub '${Bucket.Arn}/*'
  BucketPolicyElbAccessLogWrite:
    Condition: HasElbAccessLogWriteAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Principal:
            AWS: # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
            - !If [HasPartitionPublic, 'arn:aws:iam::127311923021:root', !Ref 'AWS::NoValue'] # us-east-1
            - !If [HasPartitionPublic, 'arn:aws:iam::033677994240:root', !Ref 'AWS::NoValue'] # us-east-2
            - !If [HasPartitionPublic, 'arn:aws:iam::027434742980:root', !Ref 'AWS::NoValue'] # us-west-1
            - !If [HasPartitionPublic, 'arn:aws:iam::797873946194:root', !Ref 'AWS::NoValue'] # us-west-2
            - !If [HasPartitionPublic, 'arn:aws:iam::985666609251:root', !Ref 'AWS::NoValue'] # ca-central-1
            - !If [HasPartitionPublic, 'arn:aws:iam::054676820928:root', !Ref 'AWS::NoValue'] # eu-central-1
            - !If [HasPartitionPublic, 'arn:aws:iam::156460612806:root', !Ref 'AWS::NoValue'] # eu-west-1
            - !If [HasPartitionPublic, 'arn:aws:iam::652711504416:root', !Ref 'AWS::NoValue'] # eu-west-2
            - !If [HasPartitionPublic, 'arn:aws:iam::009996457667:root', !Ref 'AWS::NoValue'] # eu-west-3
            - !If [HasPartitionPublic, 'arn:aws:iam::897822967062:root', !Ref 'AWS::NoValue'] # eu-north-1
            - !If [HasPartitionPublic, 'arn:aws:iam::582318560864:root', !Ref 'AWS::NoValue'] # ap-northeast-1
            - !If [HasPartitionPublic, 'arn:aws:iam::600734575887:root', !Ref 'AWS::NoValue'] # ap-northeast-2
            - !If [HasPartitionPublic, 'arn:aws:iam::383597477331:root', !Ref 'AWS::NoValue'] # ap-northeast-3
            - !If [HasPartitionPublic, 'arn:aws:iam::114774131450:root', !Ref 'AWS::NoValue'] # ap-southeast-1
            - !If [HasPartitionPublic, 'arn:aws:iam::783225319266:root', !Ref 'AWS::NoValue'] # ap-southeast-2
            - !If [HasPartitionPublic, 'arn:aws:iam::718504428378:root', !Ref 'AWS::NoValue'] # ap-south-1
            - !If [HasPartitionPublic, 'arn:aws:iam::507241528517:root', !Ref 'AWS::NoValue'] # sa-east-1
            - !If [HasPartitionUsGov, 'arn:aws-us-gov:iam::048591011584:root', !Ref 'AWS::NoValue'] # us-gov-west-1*
            - !If [HasPartitionUsGov, 'arn:aws-us-gov:iam::190560391635:root', !Ref 'AWS::NoValue'] # us-gov-east-1*
            - !If [HasPartitionChina, 'arn:aws-cn:iam::638102146993:root', !Ref 'AWS::NoValue'] # cn-north-1*
            - !If [HasPartitionChina, 'arn:aws-cn:iam::037604701340:root', !Ref 'AWS::NoValue'] # cn-northwest-1*
          Action: 's3:PutObject'
          Effect: Allow
          Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
        - Principal:
            Service: 'delivery.logs.amazonaws.com' # https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-access-logs.html
          Action: 's3:PutObject'
          Effect: Allow
          Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
        - Principal:
            Service: 'delivery.logs.amazonaws.com' # https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-access-logs.html
          Action: 's3:GetBucketAcl'
          Effect: Allow
          Resource: !GetAtt 'Bucket.Arn'
  BucketPolicyConfigWrite:
    Condition: HasConfigWriteAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'config.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !GetAtt 'Bucket.Arn'
        - Effect: Allow
          Principal:
            Service: 'config.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
  BucketPolicyCloudTrailWrite:
    Condition: HasCloudTrailWriteAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !GetAtt 'Bucket.Arn'
        - Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
  BucketPolicyFlowLogWrite:
    Condition: HasFlowLogWriteAccess
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement: # https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-s3.html#flow-logs-s3-permissions
        - Sid: AWSLogDeliveryWrite
          Effect: Allow
          Principal:
            Service: 'delivery.logs.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub '${Bucket.Arn}/*AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
        - Sid: AWSLogDeliveryAclCheck
          Effect: Allow
          Principal:
            Service: 'delivery.logs.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !GetAtt 'Bucket.Arn'
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Bucket
Outputs:
  ModuleId:
    Value: 's3-bucket'
  ModuleVersion:
    Value: '1.6.0'
  StackName:
    Value: !Ref 'AWS::StackName'
  Arn:
    Value: !GetAtt 'Bucket.Arn'
    Export:
      Name: !Sub '${AWS::StackName}-Arn'
  Name:
    Value: !Ref Bucket
    Export:
      Name: !Sub '${AWS::StackName}-Name'
  DomainName:
    Value: !GetAtt 'Bucket.DomainName'
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'
  CloudFrontOriginAccessIdentity:
    Condition: HasCloudFrontReadAccess
    Value: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontOriginAccessIdentity'
  IamActions:
    Value: 's3:DeleteObject*,s3:GetObject*,s3:ListBucket*,s3:ListMultipartUploadParts,s3:PutObject*'
    Export:
      Name: !Sub '${AWS::StackName}-IamActions'
  IamResources:
    Value: !Sub '${Bucket.Arn},${Bucket.Arn}/*'
    Export:
      Name: !Sub '${AWS::StackName}-IamResources'
